name: "Nox Tests"

on:
    push:
        branches:
        - main
    pull_request:
    schedule:
        - cron: "20 1 * * sat"
    workflow_dispatch:

defaults:
    run:
        shell: bash

jobs:
    tests:
        name: "Testing on ${{ matrix.os }}"
        runs-on: "${{ matrix.os }}"

        strategy:
            fail-fast: false
            matrix:
                os:
                    - ubuntu-latest
                    - macos-latest
                    - windows-latest

        steps:
            - name:  Set up conda (linux/mac only)
              if: startsWith(matrix.os, 'ubuntu') || startsWith(matrix.os, 'macos')
              id: set-up-conda
              run:
                  if [[ "$RUNNER_OS" == "Linux" ]]; then
                    wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh
                  elif [[ "$RUNNER_OS" == "macOS" ]]; then
                    wget https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-x86_64.sh -O miniconda.sh
                  fi

            - name: Set up Homebrew (linux/mac only)
              if: startsWith(matrix.os, 'ubuntu') || startsWith(matrix.os, 'macos')
              id: set-up-homebrew
              uses: Homebrew/actions/setup-homebrew@master

            - name: "Check out the repo"
              uses: "actions/checkout@v4"

            - name: "Set up Python"
              uses: "actions/setup-python@v5"
              with:
                  python-version: |
                    3.10
                    3.11
                    3.12

            - name: "Install dependencies"
              run: |
                  python -m pip install --upgrade pip
                  python -m pip install nox poetry

            - name: "Get public IP address of runner"
              # Need to handle this for Windows, MacOS, and linux
              # Fetch from ipinfo.io/ip and echo it
              run: |
                  if [[ "$RUNNER_OS" == "Windows" ]]; then
                    echo "Windows runner IP: $(curl -s https://ipinfo.io/ip)"
                  elif [[ "$RUNNER_OS" == "macOS" ]]; then
                    echo "macOS runner IP: $(curl -s https://ipinfo.io/ip)"
                  else
                    echo "Linux runner IP: $(curl -s https://ipinfo.io/ip)"
                  fi

            - name: "Run nox"
              run: |
                  # Unit tests
                  python -m nox -r

            - name: "DRAGONS integration tests"
              run: |
                if [[ "$RUNNER_OS" != "Windows" ]]; then
                  brew install sextractor
                  python -m nox -r -s dragons_release_tests
                  python -m nox -r -s dragons_dev_tests
                fi

            - name: "Upload coverage data"
              uses: actions/upload-artifact@v3
              with:
                  name: covdata
                  path: .coverage.*
