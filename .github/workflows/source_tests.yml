name: "Source testing"

on:
    push:
        branches:
        - main
    pull_request:
    schedule:
        - cron: "20 1 * * mon"
    workflow_dispatch:
    workflow_call:

defaults:
    run:
        shell: bash -l {0} # Login shell for conda

jobs:
    unit_tests:
        name: "Unit testing on ${{ matrix.os }}"
        runs-on: "${{ matrix.os }}"

        strategy:
            fail-fast: false
            matrix:
                os:
                    - ubuntu-latest
                    - macos-latest
                    - windows-latest

        steps:
            - name: "Check out the repo"
              uses: "actions/checkout@v4"

            - name: "Set up Python"
              uses: "actions/setup-python@v5"
              with:
                  python-version: |
                    3.10
                    3.11
                    3.12

            - name: "Configure gfortran (for scipy)"
              run: |
                # Needed because of issues outlined in
                # https://github.com/actions/runner-images/issues/3371
                echo "FC=gfortran-13" >> "$GITHUB_ENV"
                echo "F77=gfortran-13" >> "$GITHUB_ENV"
                echo "F90=gfortran-13" >> "$GITHUB_ENV"

            - name: "Install dependencies"
              run: |
                  python -m pip install --upgrade pip
                  python -m pip install nox poetry

            - name: "Get public IP address of runner"
              # Need to handle this for Windows, MacOS, and linux
              # Fetch from ipinfo.io/ip and echo it
              run: |
                  if [[ "$RUNNER_OS" == "Windows" ]]; then
                    echo "Windows runner IP: $(curl -s https://ipinfo.io/ip)"
                  elif [[ "$RUNNER_OS" == "macOS" ]]; then
                    echo "macOS runner IP: $(curl -s https://ipinfo.io/ip)"
                  else
                    echo "Linux runner IP: $(curl -s https://ipinfo.io/ip)"
                  fi

            - name: "Run nox"
              run: |
                  # Unit tests
                  python -m nox -r -vv

            - name: "Upload coverage data"
              uses: actions/upload-artifact@v3
              with:
                  name: covdata
                  path: .coverage.*

    documentation_tests:
        name: "Documentation testing on ${{ matrix.os }}"
        runs-on: "${{ matrix.os }}"

        strategy:
            fail-fast: false
            matrix:
                os:
                    - ubuntu-latest
                    - macos-latest

        steps:
            - name: "Check out the repo"
              uses: "actions/checkout@v4"

            - name: "Set up Python"
              uses: "actions/setup-python@v5"
              with:
                  python-version: |
                    3.10
                    3.11
                    3.12

            - name: "Install dependencies"
              run: |
                  python -m pip install --upgrade pip
                  python -m pip install nox poetry

            - name: "Get public IP address of runner"
              # Need to handle this for Windows, MacOS, and linux
              # Fetch from ipinfo.io/ip and echo it
              run: |
                  if [[ "$RUNNER_OS" == "Windows" ]]; then
                    echo "Windows runner IP: $(curl -s https://ipinfo.io/ip)"
                  elif [[ "$RUNNER_OS" == "macOS" ]]; then
                    echo "macOS runner IP: $(curl -s https://ipinfo.io/ip)"
                  else
                    echo "Linux runner IP: $(curl -s https://ipinfo.io/ip)"
                  fi

            - name: "Run nox"
              run: |
                  # Unit tests
                  python -m nox -s script_tests --verbose -x -- -xvv

            # - name: "Upload coverage data"
            #   uses: actions/upload-artifact@v3
            #   with:
            #       name: covdata
            #       path: .coverage.*

    integration_tests:
        name: "DRAGONS integration testing on ${{ matrix.os }}"
        runs-on: "${{ matrix.os }}"

        strategy:
            fail-fast: false
            matrix:
                os:
                    - ubuntu-latest
                    # TODO(teald): - macos-latest | Issue #39

        steps:
            - name: "Check out the repo"
              uses: "actions/checkout@v4"

            # Setup python
            - name: "Setup Python"
              uses: actions/setup-python@v5
              with:
                  python-version: "3.10"

            - uses: conda-incubator/setup-miniconda@v3

            - name: "Get public IP address of runner"
              # Need to handle this for MacOS and linux
              # Fetch from ipinfo.io/ip and echo it
              run: |
                  if [[ "$RUNNER_OS" == "macOS" ]]; then
                    echo "macOS runner IP: $(curl -s https://ipinfo.io/ip)"
                  else
                    echo "Linux runner IP: $(curl -s https://ipinfo.io/ip)"
                  fi

            - name: "Install nox, poetry in the base environment"
              run: |
                  python -m pip install --upgrade pip
                  python -m pip install nox poetry

            - name: "DRAGONS release tests"
              run: |
                # Need to activate this here because the conda action doesn't
                # play nicely with the default python setup.
                # conda activate test_env

                python -m nox -r -s dragons_release_tests --verbose -- -xvv

            - name: "DRAGONS dev tests"
              run: |
                # Need to activate this here because the conda action doesn't
                # play nicely with the default python setup.
                # conda activate test_env

                # python -m nox -r -s dragons_dev_tests --verbose -- -xvv
                echo "DRAGONS dev tests are disabled for now, they are"
                echo "functional but are not going to be addressed"
                echo "immediately."

            - name: "Upload coverage data"
              uses: actions/upload-artifact@v3
              with:
                  name: covdata
                  path: .coverage.*
