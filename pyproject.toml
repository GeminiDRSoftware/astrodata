[tool.poetry]
name = "astrodata"
version = "2.9.0"
description = "A package for managing astronomical data through a uniform interface"
authors = ["D. J. Teal <dillon.teal@noirlab.com>", "DRAGONS development team"]
license = "BSD3"
readme = "README.rst"

[tool.poetry.dependencies]
python = "^3.10"
astropy = "^6.0.0"
asdf = "^3.1.0"
gwcs = "^0.21.0"
jsonschema = "^4.21.1"
numpy = "^1.26.4"

[tool.poetry.group.dev]

[tool.poetry.group.dev.dependencies]
ruff = "^0.3.3"
coverage = "^7.4.4"
isort = "^5.13.2"
poetry = "^1.8.2"
pre-commit = "^3.6.2"

[tool.poetry.group.docs]

[tool.poetry.group.docs.dependencies]
sphinx = "^7.2.6"
sphinx-automodapi = "^0.17.0"
sphinx-autoapi = "^3.0.0"
sphinx-rtd-dark-mode = "^1.3.0"
sphinx-rtd-theme = "^2.0.0"
myst-parser = "^2.0.0"
tomli = "^2.0.1"
pygments = "^2.17.2"

[tool.poetry.group.test]

[tool.poetry.group.test.dependencies]
pytest = "^8.1.1"
coverage = "^7.4.4"
pytest-cov = "^4.1.0"
pytest-doctestplus = "^1.2.1"
tox = "^4.14.1"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
testpaths = [
  "tests",
  # "docs/examples", # TODO: placeholder for example testing
]

markers = [
    "dragons_remote_data: data used by DRAGONS tests",
]

doctest_plus = "enabled"
text_file_format = "rst"
# TODO: addopts = "--doctest-rst --cov=astrodata --cov-report=html"
addopts = "--doctest-rst"
# TODO: plugins = ["pytest_profiling"]

[tool.coverage.run]
omit = [
 "astrodata/__init*",
 "astrodata/conftest.py",
 "astrodata/*setup_package*",
 "astrodata/tests/*",
 "astrodata/*/tests/*",
 "astrodata/extern/*",
 "astrodata/version*",
 "*/astrodata/__init*",
 "*/astrodata/conftest.py",
 "*/astrodata/*setup_package*",
 "*/astrodata/tests/*",
 "*/astrodata/*/tests/*",
 "*/astrodata/extern/*",
 "*/astrodata/version*",
 "*/*/astrodata/testing.py",
 "_*.py",
]

[tool.coverage.report]
exclude_lines = [
  # Have to re-enable the standard pragma
  "pragma: no cover",
  # Don't complain about packages we have installed
  "except ImportError",
  # Don't complain if tests don't hit assertions
  "raise AssertionError",
  "raise NotImplementedError",
  # Don't complain about script hooks
  "def main(.*):",
  # Ignore branches that don't pertain to this version of Python
  "pragma: py{ignore_python_version}",
  # Don't complain about IPython completion helper
  "def _ipython_key_completions_",
]
