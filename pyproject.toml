[build-system]
requires = [
  "setuptools>=61.2",
  "setuptools_scm[toml]>=6.2",
  "wheel",
]

build-backend = "setuptools.build_meta"

[project]
name = "astrodata"
description = "A package for managing astronomical data through a uniform interface."
readme = "README.rst"
requires-python = ">=3.9"
license = { file = "licenses/LICENSE.rst", content-type = "text/plain" }

dependencies = [
    "asdf",
    "astropy",
    "gwcs",
    "jsonschema",
    "numpy",
]

dynamic = ["version"]

[project.optional-dependencies]
test = [
    "coverage",
    "pytest",
    "pytest-cov",
    "pytest-doctestplus",
]

dev = [
    "black",
    "coverage",
    "flake8",
    "isort",
    "pre-commit",
    "pytest",
    "pytest-cov",
    "pytest-doctestplus",
    "scalene",
    "sphinx",
    "sphinx-automodapi",
]

docs = [
    "myst_parser",
    "sphinx",
    "sphinx-autoapi",
    "sphinx-automodapi",
    "sphinx-rtd-dark-mode",
    "sphinx-rtd-theme",
    "tomli; python_version <\"3.11\"",
]

[tool.setuptools]
zip-safe = false
include-package-data = true

[tool.setuptools.packages.find]

[tool.setuptools_scm]

write_to = "astrodata/version.py"

[tool.pytest.ini_options]
testpaths = [
  "astrodata",
  # "docs/examples", # TODO: placeholder for example testing
]

markers = [
    "dragons_remote_data: data used by DRAGONS tests",
]

doctest_plus = "enabled"
text_file_format = "rst"
addopts = "--doctest-rst --cov=astrodata --cov-report=html"

[tool.coverage.run]
omit = [
 "astrodata/__init*",
 "astrodata/conftest.py",
 "astrodata/*setup_package*",
 "astrodata/tests/*",
 "astrodata/*/tests/*",
 "astrodata/extern/*",
 "astrodata/version*",
 "*/astrodata/__init*",
 "*/astrodata/conftest.py",
 "*/astrodata/*setup_package*",
 "*/astrodata/tests/*",
 "*/astrodata/*/tests/*",
 "*/astrodata/extern/*",
 "*/astrodata/version*",
 "*/*/astrodata/testing.py"
]

[tool.coverage.report]
exclude_lines = [
  # Have to re-enable the standard pragma
  "pragma: no cover",
  # Don't complain about packages we have installed
  "except ImportError",
  # Don't complain if tests don't hit assertions
  "raise AssertionError",
  "raise NotImplementedError",
  # Don't complain about script hooks
  "def main(.*):",
  # Ignore branches that don't pertain to this version of Python
  "pragma: py{ignore_python_version}",
  # Don't complain about IPython completion helper
  "def _ipython_key_completions_",
]
